using System.Web.Http;
using WebActivatorEx;
using Ads;
using Swashbuckle.Application;
using Ads.Utils;

[assembly: PreApplicationStartMethod(typeof(SwaggerConfig), "Register")]

namespace Ads
{
    /// <summary>
    /// Swagger configuration class.
    /// </summary>
    public class SwaggerConfig
    {
        /// <summary>
        /// Register swagger.
        /// </summary>
        public static void Register()
        {

            GlobalConfiguration.Configuration 
                .EnableSwagger(c =>
                    {
                        // Use "SingleApiVersion" to describe a single version API. Swagger 2.0 includes an "Info" object to
                        // hold additional metadata for an API. Version and title are required but you can also provide
                        // additional fields by chaining methods off SingleApiVersion.
                        //
                        c.SingleApiVersion("v1", "Ads");

                        // If you annotate Controllers and API Types with
                        // Xml comments (http://msdn.microsoft.com/en-us/library/b2s063f7(v=vs.110).aspx), you can incorporate
                        // those comments into the generated docs and UI. You can enable this by providing the path to one or
                        // more Xml comment files.
                        c.IncludeXmlComments(string.Format(@"{0}\bin\Ads.XML",
                           System.AppDomain.CurrentDomain.BaseDirectory));

                        // Similar to Schema filters, Swashbuckle also supports Operation and Document filters:
                        //
                        // Post-modify Operation descriptions once they've been generated by wiring up one or more
                        // Operation filters.
                        c.OperationFilter<SwaggerAuthorizationHeader>();
                        
                    })
                .EnableSwaggerUi(c =>
                    {
                        
                    });
        }
    }
}
